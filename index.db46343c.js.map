{"mappings":"ACiOA,QAAQ,GAAG,CAFE,K,4D","sources":["<anon>","src/index.mjs"],"sourcesContent":["var $761f97bf09d51d3e$exports = {};\n/**\n * const, let等の変数宣言\n */ // var val1 = \"var変数\";\n// console.log(val1);\n// // var変数は上書き可能\n// val1 = \"var変数を上書き\";\n// console.log(val1);\n// // var変数は再宣言可能\n// var val1 = \"var変数を再宣言\";\n// console.log(val1);\n// let val2 = \"let変数\";\n// console.log(val2);\n// // letは上書きが可能\n// val2 = \"let変数を上書き\";\n// console.log(val2);\n// // letは再宣言不可能\n// let val2 = \"let変数を再宣言\";\n// const val3 = \"const変数\";\n// console.log(val3);\n// // const変数は上書き不可\n// // val3 = \"const変数を上書き\";\n// const val3 = \"const変数を再宣言\";\n// constで定義したオブジェクトはプロパティの変更が可能\n// const val4 = {\n//   name: \"じゃけぇ\",\n//   ageg: 28,\n// };\n// val4.name = \"jak\";\n// val4.addres = \"Hiroshima\";\n// console.log(val4);\n// constで定義した配列はプロパティの変更が可能\n// const val5 = ['dog', 'cat'];\n// val5[0] = \"bird\";\n// val5.push(\"mpmkey\");\n// console.log(val5);\n/**\n * テンプレート文字列\n */ // const name = \"じゃけぇ\";\n// const age = 28;\n// // 「私の名前はじゃけぇです。年齢は28歳です。」\n// // 従来の方法\n// const message1 = \"私の名前は\" + name + \"です。年齢は\" + age + \"です。\";\n// console.log(message1);\n// // テンプレート文字列を用いた方法\n// const message2 = `私の名前は${name}です。年齢は${age}です。`;\n// console.log(message2);\n/**\n * アロー関数\n */ // 従来の関数\n// function func1(str) {\n//   return str;\n// }\n// const func1 = function(str) {\n//   return str;\n// }\n// console.log(func1(\"func1です\"));\n// // アロー関数。functionを省略する書き方 ※保存時に()自動補完が効かなかった\n// const func2 = (str) => {\n//   return str;\n// };\n// // const func2 = (str) => str; // {}を書かない場合はreturnは不要\n// console.log(func2(\"func2です\"));\n// // const func3 = (num1, num2) => {\n// //   return num1 + num2;\n// // };\n// const func3 = (num1, num2) => num1 + num2;\n// console.log(func3(10, 20));\n/**\n * 分割代入(オブジェクトや配列から要素を抜き出して新規変数に代入する)\n */ // const myProfile = {\n//   name: \"じゃけぇ\",\n//   age: 28,\n// };\n// const message1 = `名前は${myProfile.name}です。年齢は${myProfile.age}歳です。`;\n// console.log(message1);\n// const {name, age} = myProfile;\n// const message2 = `名前は${name}です。年齢は${age}歳です。`;\n// console.log(message2);\n// const myProfile = ['じゃけぇ', 28];\n// const message3 = `名前は${myProfile[0]}です。年齢は${myProfile[1]}歳です`;\n// console.log(message3);\n// const[name, age] = myProfile;\n// const message4 = `名前は${name}です。年齢は${age}歳です`;\n// console.log(message4);\n/**\n * デフォルト値、引数など。undefinedを渡された場合に自動的に代入される\n */ // const sayHello = (name = \"ゲスト\") => console.log(`こんにちは${name}さん!`);\n// sayHello();\n/**\n * スプレッド構文 ... ドット3つ+変数名と記載すると要素を順番に処理してくれる\n */ // 配列の展開\n// const arr1 = [1, 2];\n// // console.log(arr1);\n// // console.log(...arr1);\n// const sumFunc = (num1, num2) => console.log(num1 + num2);\n// sumFunc(arr1[0], arr1[1]);\n// sumFunc(...arr1);\n// まとめる\n// const arr2 = [1, 2, 3, 4, 5];\n// const [num1, num2, ...arr3] = arr2;\n// console.log(num1);\n// console.log(num2);\n// console.log(arr3);\n// 配列のコピー、結合\n// const arr4 = [10, 20];\n// const arr5 = [30, 40];\n// const arr6 = [...arr4];\n// arr6[0] = 100;\n// console.log(arr6);\n// console.log(arr4); // コピー前の配列の値は変更されていない。参照渡しではなく値のコピーになっている事がわかる\n// const arr7 = [...arr4, ...arr5];\n// console.log(arr7);\n// const arr8 = arr4; // 配列を=で代入すると要素のコピーではなくポインタのコピー（参照渡し）になってしまい、コピー後の要素を編集するとコピー前の配列の要素も書き換わってしまう\n// arr8[0] = 100;\n// console.log(arr4);\n/**\n * mapやfilterを使った配列の処理\n * result = array.map(コールバック関数) という感じで使う。\n * 要素が1つずつコールバック関数に渡される。戻り地には処理結果の配列が返される\n * コールバック関数の引数は、配列の要素1つ、配列の要素のindex、配列全体\n * ↑第一引数以外は省略可能\n */ // map\nconst $761f97bf09d51d3e$var$nameArr = [\n    \"\\u7530\\u4E2D\",\n    \"\\u5C71\\u7530\",\n    \"\\u3058\\u3083\\u3051\\u3047\"\n];\n// for (let index = 0; index < nameArr.length; index++) {\n//   console.log(`${index + 1}番目は${nameArr[index]}です`);\n// }\n// const nameArr2 = nameArr.map((name)=>{\n//   return name;\n// });\n// console.log(nameArr);\n// console.log(nameArr2);\n// nameArr.map((name, index, arr) => console.log(`${index + 1}番目は${name}です`));\n// フィルタ filetrの引数で指定した関数に該当する要素のみ返す\n// const numArr = [1, 2, 3, 4, 5];\n// const newNumArr = numArr.filter((num) => {\n//   return num % 2 === 0;\n// });\n// console.log(newNumArr);\n// const newNameArr = nameArr.map((name) => {\n//   if (name === \"じゃけぇ\") {\n//     return name;\n//   } else {\n//     return `${name}さん`;\n//   }\n// });\n// console.log(newNameArr);\n/**\n * 三項演算子\n */ // ある条件 ? 条件がtrueの時 : 条件がfalseの時\n// const val1 = 1 < 0 ? 'trueです' : 'falseです';\n// console.log(val1);\n// const num = \"1300\";\n// //const num = 1300;\n// const formattedNum = typeof num === 'number' ? num.toLocaleString() : '数値を入力してください';\n// console.log(formattedNum);\n// const checkSum = (num1, num2) => {\n//   return num1 + num2 > 100 ? '100を超えています!!' : '許容範囲内です';\n// }\n// console.log(checkSum(50, 40));\n/**\n * 論理演算子の本当の意味を知ろう\n */ // const flag1 = true;\n// const flag2 = false;\n// if (flag1 || flag2) {\n//   console.log(\"1か2はtrueになります\");\n// }\n// if (flag1 && flag2) {\n//   console.log(\"1も2もtrueになります\");\n// }\n// || は左側がfalseなら右側を返す\n// const num = null;\n// const fee = num || \"金額未設定です\";\n// console.log(fee);\n// && は左側がtrueなら右側を返す\nconst $761f97bf09d51d3e$var$num2 = null;\nconst $761f97bf09d51d3e$var$fee2 = $761f97bf09d51d3e$var$num2 && \"\\u4F55\\u304B\\u8A2D\\u5B9A\\u3055\\u308C\\u307E\\u3057\\u305F\";\nconsole.log($761f97bf09d51d3e$var$fee2);\n\n\n//# sourceMappingURL=index.db46343c.js.map\n","/**\n * const, let等の変数宣言\n */\n// var val1 = \"var変数\";\n// console.log(val1);\n\n// // var変数は上書き可能\n// val1 = \"var変数を上書き\";\n// console.log(val1);\n\n// // var変数は再宣言可能\n// var val1 = \"var変数を再宣言\";\n// console.log(val1);\n\n// let val2 = \"let変数\";\n// console.log(val2);\n\n// // letは上書きが可能\n// val2 = \"let変数を上書き\";\n// console.log(val2);\n\n// // letは再宣言不可能\n// let val2 = \"let変数を再宣言\";\n\n// const val3 = \"const変数\";\n// console.log(val3);\n\n// // const変数は上書き不可\n// // val3 = \"const変数を上書き\";\n\n// const val3 = \"const変数を再宣言\";\n\n// constで定義したオブジェクトはプロパティの変更が可能\n// const val4 = {\n//   name: \"じゃけぇ\",\n//   ageg: 28,\n// };\n// val4.name = \"jak\";\n// val4.addres = \"Hiroshima\";\n// console.log(val4);\n\n// constで定義した配列はプロパティの変更が可能\n// const val5 = ['dog', 'cat'];\n// val5[0] = \"bird\";\n// val5.push(\"mpmkey\");\n// console.log(val5);\n\n/**\n * テンプレート文字列\n */\n// const name = \"じゃけぇ\";\n// const age = 28;\n// // 「私の名前はじゃけぇです。年齢は28歳です。」\n\n// // 従来の方法\n// const message1 = \"私の名前は\" + name + \"です。年齢は\" + age + \"です。\";\n// console.log(message1);\n\n// // テンプレート文字列を用いた方法\n// const message2 = `私の名前は${name}です。年齢は${age}です。`;\n// console.log(message2);\n\n/**\n * アロー関数\n */\n// 従来の関数\n// function func1(str) {\n//   return str;\n// }\n// const func1 = function(str) {\n//   return str;\n// }\n// console.log(func1(\"func1です\"));\n\n// // アロー関数。functionを省略する書き方 ※保存時に()自動補完が効かなかった\n// const func2 = (str) => {\n//   return str;\n// };\n// // const func2 = (str) => str; // {}を書かない場合はreturnは不要\n// console.log(func2(\"func2です\"));\n\n// // const func3 = (num1, num2) => {\n// //   return num1 + num2;\n// // };\n// const func3 = (num1, num2) => num1 + num2;\n// console.log(func3(10, 20));\n\n/**\n * 分割代入(オブジェクトや配列から要素を抜き出して新規変数に代入する)\n */\n// const myProfile = {\n//   name: \"じゃけぇ\",\n//   age: 28,\n// };\n// const message1 = `名前は${myProfile.name}です。年齢は${myProfile.age}歳です。`;\n// console.log(message1);\n\n// const {name, age} = myProfile;\n// const message2 = `名前は${name}です。年齢は${age}歳です。`;\n// console.log(message2);\n\n// const myProfile = ['じゃけぇ', 28];\n\n// const message3 = `名前は${myProfile[0]}です。年齢は${myProfile[1]}歳です`;\n// console.log(message3);\n\n// const[name, age] = myProfile;\n// const message4 = `名前は${name}です。年齢は${age}歳です`;\n// console.log(message4);\n\n/**\n * デフォルト値、引数など。undefinedを渡された場合に自動的に代入される\n */\n// const sayHello = (name = \"ゲスト\") => console.log(`こんにちは${name}さん!`);\n// sayHello();\n\n/**\n * スプレッド構文 ... ドット3つ+変数名と記載すると要素を順番に処理してくれる\n */\n// 配列の展開\n// const arr1 = [1, 2];\n// // console.log(arr1);\n// // console.log(...arr1);\n\n// const sumFunc = (num1, num2) => console.log(num1 + num2);\n// sumFunc(arr1[0], arr1[1]);\n// sumFunc(...arr1);\n\n// まとめる\n// const arr2 = [1, 2, 3, 4, 5];\n// const [num1, num2, ...arr3] = arr2;\n// console.log(num1);\n// console.log(num2);\n// console.log(arr3);\n\n// 配列のコピー、結合\n// const arr4 = [10, 20];\n// const arr5 = [30, 40];\n\n// const arr6 = [...arr4];\n// arr6[0] = 100;\n// console.log(arr6);\n// console.log(arr4); // コピー前の配列の値は変更されていない。参照渡しではなく値のコピーになっている事がわかる\n\n// const arr7 = [...arr4, ...arr5];\n// console.log(arr7);\n\n// const arr8 = arr4; // 配列を=で代入すると要素のコピーではなくポインタのコピー（参照渡し）になってしまい、コピー後の要素を編集するとコピー前の配列の要素も書き換わってしまう\n// arr8[0] = 100;\n// console.log(arr4);\n\n/**\n * mapやfilterを使った配列の処理\n * result = array.map(コールバック関数) という感じで使う。\n * 要素が1つずつコールバック関数に渡される。戻り地には処理結果の配列が返される\n * コールバック関数の引数は、配列の要素1つ、配列の要素のindex、配列全体\n * ↑第一引数以外は省略可能\n */\n// map\nconst nameArr = [\"田中\", \"山田\", \"じゃけぇ\"];\n// for (let index = 0; index < nameArr.length; index++) {\n//   console.log(`${index + 1}番目は${nameArr[index]}です`);\n// }\n\n// const nameArr2 = nameArr.map((name)=>{\n//   return name;\n// });\n// console.log(nameArr);\n// console.log(nameArr2);\n\n// nameArr.map((name, index, arr) => console.log(`${index + 1}番目は${name}です`));\n\n// フィルタ filetrの引数で指定した関数に該当する要素のみ返す\n// const numArr = [1, 2, 3, 4, 5];\n// const newNumArr = numArr.filter((num) => {\n//   return num % 2 === 0;\n// });\n// console.log(newNumArr);\n\n// const newNameArr = nameArr.map((name) => {\n//   if (name === \"じゃけぇ\") {\n//     return name;\n//   } else {\n//     return `${name}さん`;\n//   }\n// });\n// console.log(newNameArr);\n\n/**\n * 三項演算子\n */\n// ある条件 ? 条件がtrueの時 : 条件がfalseの時\n// const val1 = 1 < 0 ? 'trueです' : 'falseです';\n// console.log(val1);\n\n// const num = \"1300\";\n// //const num = 1300;\n// const formattedNum = typeof num === 'number' ? num.toLocaleString() : '数値を入力してください';\n// console.log(formattedNum);\n\n// const checkSum = (num1, num2) => {\n//   return num1 + num2 > 100 ? '100を超えています!!' : '許容範囲内です';\n// }\n// console.log(checkSum(50, 40));\n\n/**\n * 論理演算子の本当の意味を知ろう\n */\n// const flag1 = true;\n// const flag2 = false;\n// if (flag1 || flag2) {\n//   console.log(\"1か2はtrueになります\");\n// }\n// if (flag1 && flag2) {\n//   console.log(\"1も2もtrueになります\");\n// }\n\n// || は左側がfalseなら右側を返す\n// const num = null;\n// const fee = num || \"金額未設定です\";\n// console.log(fee);\n\n// && は左側がtrueなら右側を返す\nconst num2 = null;\nconst fee2 = num2 && \"何か設定されました\";\nconsole.log(fee2);"],"names":["console","log"],"version":3,"file":"index.db46343c.js.map"}